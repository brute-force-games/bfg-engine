/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './__root'
import { Route as Bfg3RouteImport } from './bfg3'
import { Route as Bfg1RouteImport } from './bfg1'
import { Route as Bfg2TableIdRouteImport } from './bfg2.$tableId'
import { Route as Bfg2TableIdBRouteImport } from './bfg2.$tableId/b'
import { Route as Bfg2TableIdARouteImport } from './bfg2.$tableId/a'

const Bfg3Route = Bfg3RouteImport.update({
  id: '/bfg3',
  path: '/bfg3',
  getParentRoute: () => rootRouteImport,
} as any)
const Bfg1Route = Bfg1RouteImport.update({
  id: '/bfg1',
  path: '/bfg1',
  getParentRoute: () => rootRouteImport,
} as any)
const Bfg2TableIdRoute = Bfg2TableIdRouteImport.update({
  id: '/bfg2/$tableId',
  path: '/bfg2/$tableId',
  getParentRoute: () => rootRouteImport,
} as any)
const Bfg2TableIdBRoute = Bfg2TableIdBRouteImport.update({
  id: '/b',
  path: '/b',
  getParentRoute: () => Bfg2TableIdRoute,
} as any)
const Bfg2TableIdARoute = Bfg2TableIdARouteImport.update({
  id: '/a',
  path: '/a',
  getParentRoute: () => Bfg2TableIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/bfg1': typeof Bfg1Route
  '/bfg3': typeof Bfg3Route
  '/bfg2/$tableId': typeof Bfg2TableIdRouteWithChildren
  '/bfg2/$tableId/a': typeof Bfg2TableIdARoute
  '/bfg2/$tableId/b': typeof Bfg2TableIdBRoute
}
export interface FileRoutesByTo {
  '/bfg1': typeof Bfg1Route
  '/bfg3': typeof Bfg3Route
  '/bfg2/$tableId': typeof Bfg2TableIdRouteWithChildren
  '/bfg2/$tableId/a': typeof Bfg2TableIdARoute
  '/bfg2/$tableId/b': typeof Bfg2TableIdBRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/bfg1': typeof Bfg1Route
  '/bfg3': typeof Bfg3Route
  '/bfg2/$tableId': typeof Bfg2TableIdRouteWithChildren
  '/bfg2/$tableId/a': typeof Bfg2TableIdARoute
  '/bfg2/$tableId/b': typeof Bfg2TableIdBRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/bfg1'
    | '/bfg3'
    | '/bfg2/$tableId'
    | '/bfg2/$tableId/a'
    | '/bfg2/$tableId/b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/bfg1'
    | '/bfg3'
    | '/bfg2/$tableId'
    | '/bfg2/$tableId/a'
    | '/bfg2/$tableId/b'
  id:
    | '__root__'
    | '/bfg1'
    | '/bfg3'
    | '/bfg2/$tableId'
    | '/bfg2/$tableId/a'
    | '/bfg2/$tableId/b'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  Bfg1Route: typeof Bfg1Route
  Bfg3Route: typeof Bfg3Route
  Bfg2TableIdRoute: typeof Bfg2TableIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/bfg3': {
      id: '/bfg3'
      path: '/bfg3'
      fullPath: '/bfg3'
      preLoaderRoute: typeof Bfg3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bfg1': {
      id: '/bfg1'
      path: '/bfg1'
      fullPath: '/bfg1'
      preLoaderRoute: typeof Bfg1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bfg2/$tableId': {
      id: '/bfg2/$tableId'
      path: '/bfg2/$tableId'
      fullPath: '/bfg2/$tableId'
      preLoaderRoute: typeof Bfg2TableIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bfg2/$tableId/b': {
      id: '/bfg2/$tableId/b'
      path: '/b'
      fullPath: '/bfg2/$tableId/b'
      preLoaderRoute: typeof Bfg2TableIdBRouteImport
      parentRoute: typeof Bfg2TableIdRoute
    }
    '/bfg2/$tableId/a': {
      id: '/bfg2/$tableId/a'
      path: '/a'
      fullPath: '/bfg2/$tableId/a'
      preLoaderRoute: typeof Bfg2TableIdARouteImport
      parentRoute: typeof Bfg2TableIdRoute
    }
  }
}

interface Bfg2TableIdRouteChildren {
  Bfg2TableIdARoute: typeof Bfg2TableIdARoute
  Bfg2TableIdBRoute: typeof Bfg2TableIdBRoute
}

const Bfg2TableIdRouteChildren: Bfg2TableIdRouteChildren = {
  Bfg2TableIdARoute: Bfg2TableIdARoute,
  Bfg2TableIdBRoute: Bfg2TableIdBRoute,
}

const Bfg2TableIdRouteWithChildren = Bfg2TableIdRoute._addFileChildren(
  Bfg2TableIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  Bfg1Route: Bfg1Route,
  Bfg3Route: Bfg3Route,
  Bfg2TableIdRoute: Bfg2TableIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
